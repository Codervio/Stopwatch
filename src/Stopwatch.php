<?php

namespace Codervio\Stopwatch;

use Codervio\Stopwatch\Exception\EventException;
use Codervio\Stopwatch\StopwatchformatInterface;
use Codervio\Stopwatch\StopwatchRender;

/**
 * Class Stopwatch
 *
 * Stopwatch timer execution component
 *
 * @package Codervio\Stopwatch
 */
class Stopwatch implements StopwatchformatInterface
{
    protected static $delta = 19;

    /**
     * @var int deltaExp
     */
    protected static $deltaExp = 9;

    /**
     * @var int|number baseDelta
     */
    protected $baseDelta = 1;

    /**
     * @var Event stopwatch
     */
    protected $stopwatch;

    /**
     * @var int typeTime
     */
    protected $typeTime;

    /**
     * @var hashId
     */
    private $hashId;

    /**
     * @var string stopwatchName
     */
    private $stopwatchName;

    /**
     * @var int cnt
     */
    private static $cnt = 1;

    /**
     * Stopwatch constructor.
     *
     * @param null $name Event name, default null is autogenerated event name
     * @param int $typeTime StopwatchformatInterface interface format
     */
    public function __construct($name = null, $typeTime = StopwatchformatInterface::MILLISECONDS)
    {
        $this->typeTime = $typeTime;

        if (!is_null($name)) {
            $this->stopwatchName = (string)$name;
        } else {
            $this->stopwatchName = uniqid();
        }

        $this->baseDelta = $this->retrievePrecision();

        $this->stopwatch = new Event;
    }

    /**
     * Fetch event name
     *
     * @param $eventName Name of event
     * @return EventConsume A class returning of event consumption
     */
    public function getEvent($eventName)
    {
        return $this->stopwatch->getEvent($eventName);
    }

    /**
     * Internally fetch time type
     *
     * @return int
     */
    protected function getTimeType()
    {
        return $this->typeTime;
    }

    /**
     * Fetch name of stopwatch
     *
     * @return string
     */
    public function getId()
    {
        return (string)$this->stopwatchName;
    }

    public function getTaskCount()
    {
        return $this->stopwatch->getTaskCount();
    }

    private function retrievePrecision()
    {
        ini_set('precision', static::$delta);

        if ((int)ini_get('precision') === static::$delta && $this->getTimeType() === 3) {
            return $this->baseDelta = (pow(10, static::$deltaExp));
        }

        return pow(10, 3);
    }

    private function getTime()
    {
        if ($this->getTimeType() == 1) {
            return microtime(true);
        }

        if ($this->getTimeType() == 2) {
            return microtime(true) * $this->baseDelta;
        }

        return microtime(true) * $this->baseDelta;
    }

    /**
     * Start a stopwatch timer
     *
     * @param null|string $eventName
     */
    public function start(?string $eventName = null)
    {
        if (is_null($eventName)) {
            $this->hashId = $eventName = 'event_' . static::$cnt++;
        } else {
            $this->hashId = $eventName;
        }

        $this->stopwatch->start($this->getTime(), $eventName);
    }

    /**
     * Stop a stopwatch timer
     *
     * @param null|string $eventName
     * @return $this
     * @return EventException
     */
    public function stop(?string $eventName = null)
    {
        if (is_null($eventName)) {
            $eventName = $this->hashId;
        }

        if ($this->stopwatch->lastEvent()) {
            $event = $this->stopwatch->lastEvent();

            if ($event['type'] == 'start') {
                return $this->stopwatch->stop($this->getTime(), $event['name']);
            }
        }

        if (!$this->stopwatch->eventCheck($eventName)) {
            throw new EventException(sprintf("Event '%s' does not started. Add start() event", $eventName));
        }

        return $this->stopwatch->stop($this->getTime(), $eventName);
    }

    /**
     * Automatically start a new timer measurement
     *
     * @param null|string $eventName
     */
    public function next(?string $eventName = null)
    {
        if (is_null($eventName)) {
            $this->hashId = $eventName = 'event_' . ++static::$cnt;
        } else {
            $this->hashId = $eventName;
        }

        if ($this->stopwatch->lastEvent()) {
            $event = $this->stopwatch->lastEvent();

            if ($event['type'] == 'start') {
                $this->stopwatch->stop($this->getTime(), $event['name']);
                $this->stopwatch->start($this->getTime(), $this->hashId);
            }
        }
    }

    /**
     * Start freezing timer of stopwatch
     * Pause an event
     *
     * @param null|string $eventName
     */
    public function pause(?string $eventName = null)
    {
        if (is_null($eventName)) {
            $this->hashId = $eventName = 'eventpause_' . ++static::$cnt;
        } else {
            $this->hashId = $eventName;
        }

        $this->stopwatch->pause($this->getTime(), $eventName);
    }

    /**
     * Unpause event
     *
     * Unfreezing stopwatch event
     *
     * @param null|string $eventName
     */
    public function unpause(?string $eventName = null)
    {
        if (is_null($eventName)) {
            $eventName = $this->hashId;
        }

        if (!$this->stopwatch->eventCheck($eventName)) {
            throw new EventException(sprintf("Event pause '%s' does not started. Add pause() event", $eventName));
        }

        return $this->stopwatch->unpause($this->getTime(), $eventName);
    }

    /**
     * Measure elapsed stopwatch time
     *
     * @param null $eventName
     * @return string
     */
    public function getDuration($eventName = null)
    {
        $duration = $this->stopwatch->getDuration($eventName);

        return number_format((float)$duration, 2, '.', '');
    }

    public function getTimeBorn()
    {
        return $this->stopwatch->getTimeBorn();
    }

    public function getPrettyPrint()
    {
        $render = new StopwatchRender($this->stopwatchName, $this->stopwatch, $this->getTimeType());

        return $render->prettyPrint();
    }
}
